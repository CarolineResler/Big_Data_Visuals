# -*- coding: utf-8 -*-
"""Visuals

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EDCp6W2EE4qiFrjDIsqP97rLGjRxnn_L
"""

import pandas as pd
from google.colab import files
import matplotlib.pyplot as plt

df = pd.read_csv("County_MedianListingPricePerSqft_AllHomes.csv", encoding = 'Latin-1')

df_2010 = pd.read_csv("County_MedianListingPricePerSqft_AllHomes.csv", encoding = 'Latin-1', usecols = [0,1,6,7,8,9,10,11,12,13,14,15,16,17])

df_2011 = pd.read_csv("County_MedianListingPricePerSqft_AllHomes.csv", encoding = 'Latin-1', usecols = [0,1,18,19,20,21,22,23,24,25,26,27,28,29])

df_2012 = pd.read_csv("County_MedianListingPricePerSqft_AllHomes.csv", encoding = 'Latin-1', usecols = [0,1,35])

df_2019 = pd.read_csv("County_MedianListingPricePerSqft_AllHomes.csv", encoding = 'Latin-1', usecols = [0,1,114,115,116,117,118,119,120])

df.head()

# line chart  
plt.figure()
df_2012.plot(x_compat=True)

# bar chart
Cal = df_2019[ df['State'] == 'CA' ]
Cal.plot.bar();

# histogram
plt.figure();

df_2019['2019-01'].diff().hist()

# pie chart
series = pd.Series(df_2011.mean(), name='2011')
series.plot.pie(figsize=(6, 6))

# scatter graph
df_2010.plot(kind='scatter',x='2010-01',y='2010-12',color='blue')
plt.show()

# either 3-D or map
import matplotlib.patches as mpatches
import shapely.geometry as sgeom

!apt-get -qq install python-cartopy python3-cartopy
import cartopy
import cartopy.crs as ccrs
import cartopy.io.shapereader as shpreader

def plot_states(df,projection,colors,annotation,title,edgecolor):

    ax = plt.axes([0, 0, 1, 1],
                  projection=projection)
    ax.background_patch.set_visible(False)
    ax.outline_patch.set_visible(False)
    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())

    shapename = 'States'
    shpfilename = shpreader.natural_earth(resolution='110m',
                                         category='cultural', name=shapename)

    reader = shpreader.Reader(shpfilename)
    states = reader.records()
    values = list(df[title].unique())


    for state in states:
        attribute = 'name'
        name = state.attributes[attribute]

        # get classification
        try:
            classification = df.loc[state.attributes[attribute]][title]
        except:
            pass

        ax.add_geometries(state.geometry, ccrs.PlateCarree(),
                          facecolor=(colors[values.index(classification)]),
                          label=state.attributes[attribute],
                          edgecolor='#FFFFFF',
                          linewidth=.25)

    # legend
    import matplotlib.patches as mpatches
    handles = []
    for i in range(len(values)):
        handles.append(mpatches.Rectangle((0, 0), 1, 1, facecolor=colors[i]))
        plt.legend(handles, values,
                   loc='lower left', bbox_to_anchor=(0.025, -0.0), 
                   fancybox=True, frameon=False, fontsize=5)

    # annotate
    ax.annotate(annotation, xy=(0, 0),  xycoords='figure fraction',
            xytext=(0.0275, -0.025), textcoords='axes fraction',
            horizontalalignment='left', verticalalignment='center', fontsize=4,
            )

    plt.title(title, fontsize=8)

    title = title+'.png'
    plt.savefig(title, bbox_inches='tight', pad_inches=.2, dpi=300)
    print('Saved: {}'.format(title))


def main():
   
    df = pd.read_csv('County_MedianListingPricePerSqft_AllHomes.csv', index_col='State')

    # States Visited
    projection = ccrs.LambertConformal()
    title = 'States'
    colors = ['#71a2d6','#DDDDDD']
    annotation = ''
    plot_states(df,projection,colors,annotation,title,edgecolor='white')

   

    print('Done.\n')


if __name__ == '__main__':
    main()